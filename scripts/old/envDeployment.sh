#!/usr/bin/env bash

#ENV
DevEnv="13.67.54.54"
SITEnv="40.115.126.19"
UATEnv="UAT-URL"
PRODEnv="prod-url"

##yml and deployStack files
ymlFile="$WORKSPACE/docker-compose.yml"
stackDeployScript="$WORKSPACE/scripts/deployStack.sh"
storeHashScript="$WORKSPACE/scripts/cd/storeLastDeploymentHash.sh"

#cleanupDocker() {
#    echo "Cleaning up docker networks..."
#    docker network prune -f
#    echo "Cleaning up docker system..."
#    docker system prune -f -a
#    echo "Cleaning up docker images..."
#    docker image prune -f -a
#    echo "Cleaning up docker done."
#}

startDeploy () {
    echo "mv ~/scripts/docker-compose.yml ~/scripts/docker-compose.yml.back" | ssh -tT $envAddress
    scp $ymlFile        $envAddress:~/scripts
    scp $stackDeployScript $envAddress:~/scripts
    echo "scripts/deployStack.sh $DeploymentType ~/scripts/docker-compose.yml $Password" | ssh -tT $envAddress
}

refuseDeploymentOfBranch(){
    echo "******************************************************************************************"
    echo "** Refusing to deploy $BRANCH in environment $Environment.                                "
    echo "******************************************************************************************"
    echo "** This environment ONLY accepts branches like refs/tags/<release>                       "
    echo "** \"$BRANCH\" is not a tag, which means it hasn't been deployed in                       "
    echo "** another environment first, and therefore it is untested.                               "
    echo "                                                                                          "
    echo "** Please specify a proper tag name like refs/tags/RELEASE-YY.MM.DD.HHMM                 "
    echo "** These tags are generated by deploying master branch (for example) in the TEST env.     "
    echo "** You can't deploy in $Environment something that hasn't been deployed first             "
    echo "** in another environment, it's too risky.                                                "
    echo "******************************************************************************************"
    exit 1;
}

acceptDeploymentOfBranch() {
    echo "Accepting branch $BRANCH to be deployed in environment $Environment..."
    dateValue = $(date +%Y.%m.%d.%H%M)
    echo "echo 'Deployed tag ${tag} to environment : ${Environment}'  > ~/scripts/${Environment}-${dateValue}.log"| ssh -tT $envAddress
}

verifyItIsAnExistingTagOrMainBranch () {
    if [[ "${DeploymentType}" == "Force" || "${DeploymentType}" == "Incremental" ]]; then
        if [[ $BRANCH == master ]] || [[ $BRANCH == release ]] || [[ $BRANCH == refs/tags/* ]]; then
            acceptDeploymentOfBranch
        else
            refuseDeploymentOfBranch
        fi
    fi
}


verifyItIsAnExistingTag () {
    if [[ "${DeploymentType}" == "Force" || "${DeploymentType}" == "Incremental" ]]; then
        if [[ $BRANCH == refs/tags/* ]]; then
            acceptDeploymentOfBranch
        else
           refuseDeploymentOfBranch
        fi
    fi
}

tagGitRepoIfNeeded () {
    if [[ "${DeploymentType}" == "Force" || "${DeploymentType}" == "Incremental" ]]; then
        if [[ $BRANCH == refs/tags/* ]]; then
            echo "Deploying existing tag ($BRANCH), either a previous deployment or a pre-tagged release. Skipping addition of custom tag."
            tag="${BRANCH:10}"
        else
            tag="RELEASE-"$(date +%y.%m.%d.%H%M)
            date=$(date +%Y-%m-%d\ %H:%M\ %S)
            (cd $WORKSPACE && git tag -a -f ${tag} -m "Platform release ${tag}. Created by Jenkins on ${date}.")
            echo "*********************************************************************************************************"
            echo "*********************************************************************************************************"
            echo "Generated tag ${tag}, if you want to repeat this exact same release again or in another environment, use refs/tags/${tag} as branch parameter for this task."
            echo "*********************************************************************************************************"
            echo "*********************************************************************************************************"
        fi;
        echo "Applying tag name to the YML file"
        sed -i -e 's/dockerSwarmReleaseTag=Untagged/dockerSwarmReleaseTag='${tag}'/g' $ymlFile
    fi
}

pauseLeaderNode() {
    echo "Pausing swarm leader node $1..."
    echo "docker node update --availability pause $1" | ssh -tT $envAddress
    sleep 3
}

activateLeaderNode() {
    sleep 10
    echo "Active swarm leader node $1..."
    echo "docker node update --availability active $1" | ssh -tT $envAddress
}

sh ${storeHashScript}

tag="Untagged version"
cleanupDocker
tagGitRepoIfNeeded

if [ "$Environment" == "Dev" ]; then
    envAddress=$DevEnv
    pauseLeaderNode pandoravdocker101
    echo "Starting deployment for Dev env..."
    startDeploy
    activateLeaderNode pandoravdocker101
elif [ "$Environment" == "SIT" ]; then
    envAddress=104.215.198.79
    pauseLeaderNode owlvasiadocker201
    verifyItIsAnExistingTagOrMainBranch
    echo "Starting deployment for SIT env (ASIA)..."
    startDeploy
    activateLeaderNode owlvasiadocker201
    envAddress=40.113.75.100
    pauseLeaderNode owlveudocker201
    verifyItIsAnExistingTagOrMainBranch
    echo "Starting deployment for SIT env (EU) ..."
    startDeploy
    activateLeaderNode owlveudocker201
elif [ "$Environment" == "UAT" ]; then
    envAddress=65.52.168.67
    pauseLeaderNode owlvasiadocker251
    verifyItIsAnExistingTagOrMainBranch
    echo "Starting deployment for UAT env (ASIA)..."
    startDeploy
    activateLeaderNode owlvasiadocker251
    envAddress=51.144.47.184
    pauseLeaderNode owlveudocker251
    verifyItIsAnExistingTagOrMainBranch
    echo "Starting deployment for UAT env (EU)..."
    startDeploy
    activateLeaderNode owlveudocker251

elif [ "$Environment" == "PROD" ]; then
    envAddress="$PRDEnv"
    pauseLeaderNode pandoravdocker401
    verifyItIsAnExistingTag
    echo "Starting deployment for prod env..."
    startDeploy
    activateLeaderNode pandoravdocker401


fi

